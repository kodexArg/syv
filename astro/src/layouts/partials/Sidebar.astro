---
import { getCollection } from 'astro:content';
import Icon from '../../components/ui/Icon.astro';

const collectionsConfig = [
  { key: 'proyecto', name: 'Proyecto', icon: 'folder' },
  { key: 'trasfondo', name: 'Trasfondo', icon: 'book' },
  { key: 'atlas', name: 'Atlas', icon: 'map' },
  { key: 'personajes', name: 'Personajes', icon: 'users' },
  { key: 'diegesis', name: 'Diégesis', icon: 'document' },
  { key: 'aventuras', name: 'Aventuras', icon: 'lightning' },
  { key: 'media', name: 'Media', icon: 'photo' }
];

function organizeByFolders(entries: any[]) {
  const organized: Record<string, { url: string; items: any[] }> = {};
  
  for (const entry of entries) {
    const pathParts = entry.id.split('/');
    const folder = pathParts.length > 1 ? pathParts[0] : '_root';
    
    if (!organized[folder]) {
      organized[folder] = { url: '', items: [] };
    }
    
    organized[folder].items.push({
      ...entry,
      displayName: entry.data.titulo || entry.id.split('/').pop(),
      url: `/docs/${entry.collection}/${entry.id}`,
      description: entry.data.descripcion
    });
  }
  
  for (const folder in organized) {
    organized[folder].items.sort((a, b) => 
      a.displayName.localeCompare(b.displayName, 'es', { numeric: true })
    );
    if (organized[folder].items.length > 0) {
      organized[folder].url = organized[folder].items[0].url;
    }
  }
  
  return organized;
}

const navigationStructure = [];

for (const config of collectionsConfig) {
  try {
    const entries = await getCollection(config.key as any);
    
    if (entries.length > 0) {
      const organizedFolders = organizeByFolders(entries);
      
      navigationStructure.push({
        ...config,
        organized: organizedFolders
      });
    }
  } catch (error) {
    console.warn(`No se pudo cargar la colección: ${config.key}`, error);
  }
}
---

<aside id="sidebar" class="sidebar">
  <div class="p-4">
    <h2>Documentación</h2>
    <p>Subordinación y Valor</p>
    
    <nav>
      {navigationStructure.map((section) => (
        <div>
          <h3>
            <Icon name={section.icon} />
            {section.name}
          </h3>
          
          <div>
            {Object.entries(section.organized).map(([folderName, folderData]) => (
              <div>
                {folderName !== '_root' && (
                  <a href={folderData.url}>
                    <Icon name="folder-solid" size="sm" />
                    {folderName}
                  </a>
                )}
                
                <div>
                  {folderData.items.map(item => (
                    <a href={item.url} title={item.description}>
                      <Icon name="document-solid" size="sm" />
                      <span>{item.displayName}</span>
                    </a>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      ))}
    </nav>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sidebarToggle = document.getElementById('sidebar-toggle');
    const sidebar = document.getElementById('sidebar');
    const main = document.getElementById('main-content');

    function toggleSidebar() {
      sidebar?.classList.toggle('sidebar-open');
      main?.classList.toggle('main-shifted');
    }

    sidebarToggle?.addEventListener('click', toggleSidebar);
  });
</script> 